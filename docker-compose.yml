networks:
  default:
    name: traditional-network

services:
# The database for the performance test results
  db-performance-postgres:
    image: postgres:16.2
    container_name: db-performance-postgres
    environment:
      POSTGRES_DB: postgres-performance
      POSTGRES_USER: postgres-user
      POSTGRES_PASSWORD: postgres-password
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres/performance:/var/lib/postgresql/data
    networks:
      - default

# The elasticsearch service which stores logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - default

# The kibana service which visualizes logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - ./data/kibana:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    networks:
      - default

# The grafana service for visualizations
  grafana:
    image: grafana/grafana:9.1.7
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    depends_on:
      - db-performance-postgres
      #      - db-traditional-postgres
      #      - elasticsearch
    networks:
      - default

# The followings services are for manual testing, for the automated tests the
# needed container gets started by the test itself.

# The database for the traditional API
  db-traditional-postgres:
    image: postgres:16.2
    container_name: db-traditional-postgres
    environment:
      POSTGRES_DB: postgres-traditional
      POSTGRES_USER: postgres-user
      POSTGRES_PASSWORD: postgres-password
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/traditional:/var/lib/postgresql/data
      - ./data/postgres/dumps:/dumps
    networks:
      - default

## The traditional API
  api-traditional:
    image: api.traditional:latest
    container_name: api-traditional
    build:
      context: .
      dockerfile: Dockerfile-Traditional
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    ports:
      - "5012:8080"
    depends_on:
      - db-traditional-postgres
    #  - elasticsearch
    networks:
      - default

## The k6 test for the traditional API
  k6-traditional:
    image: grafana/k6
    container_name: k6-traditional
    volumes:
      # Mount RootCategories
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/RootCategories/scripts:/scripts/RootCategories
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/RootCategories/results:/results/RootCategories

      # Mount Categories
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/Categories/scripts:/scripts/Categories
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/Categories/results:/results/Categories

      # Mount Attributes
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/Attributes/scripts:/scripts/Attributes
      - ./tests/Traditional/Traditional.PerformanceTests/Assets/K6Tests/Attributes/results:/results/Attributes
    command:
    # RootCategories
      run /scripts/RootCategories/K6-GetRootCategories.js     --summary-export=/results/RootCategories/K6-GetRootCategories-Summary.json      --out json=/results/RootCategories/K6-GetRootCategories-Metric.jsonl

    # Categories
      #run /scripts/Categories/K6-GetCategoryMapping.js       --summary-export=/results/Categories/K6-GetCategoryMapping-Summary.json         --out json=/results/Categories/K6-GetCategoryMapping-Metric.jsonl
      #run /scripts/Categories/K6-GetChildrenOrTopLevel.js    --summary-export=/results/Categories/K6-GetChildrenOrTopLevel-Summary.json      --out json=/results/Categories/K6-GetChildrenOrTopLevel-Metric.jsonl
      #run /scripts/Categories/K6-SearchCategories.js         --summary-export=/results/Categories/K6-SearchCategories-Summary.json           --out json=/results/Categories/K6-SearchCategories-Metric.jsonl
      #run /scripts/Categories/K6-UpdateCategoryMapping.js    --summary-export=/results/Categories/K6-UpdateCategoryMapping-Summary.json      --out json=/results/Categories/K6-UpdateCategoryMapping-Metric.jsonl

    # Attributes
        #run /scripts/Attributes/K6-GetAttributes.js          --summary-export=/results/Attributes/K6-GetAttributes-Summary.json              --out json=/results/Attributes/K6-GetAttributes-Metric.jsonl
        #run /scripts/Attributes/K6-GetLeafAttributes.js      --summary-export=/results/Attributes/K6-GetLeafAttributes-Summary.json          --out json=/results/Attributes/K6-GetLeafAttributes-Metric.jsonl
        #run /scripts/Attributes/K6-GetSubAttributes.js       --summary-export=/results/Attributes/K6-GetSubAttributes-Summary.json           --out json=/results/Attributes/K6-GetSubAttributes-Metric.jsonl
        #run /scripts/Attributes/K6-UpdateAttributeValues.js  --summary-export=/results/Attributes/K6-UpdateAttributeValues-Summary.json      --out json=/results/Attributes/K6-UpdateAttributeValues-Metric.jsonl
    environment:
      - K6_WEB_DASHBOARD=true
    # RootCategories
      - K6_WEB_DASHBOARD_EXPORT=/results/RootCategories/K6-GetRootCategories-Report.html

    # Categories
      #- K6_WEB_DASHBOARD_EXPORT=/results/Categories/K6-GetCategoryMapping-Report.html
      #- K6_WEB_DASHBOARD_EXPORT=/results/Categories/K6-GetChildrenOrTopLevel-Report.html
      #- K6_WEB_DASHBOARD_EXPORT=/results/Categories/K6-SearchCategories-Report.html
      #- K6_WEB_DASHBOARD_EXPORT=/results/Categories/K6-UpdateCategoryMapping-Report.html

    # Attributes
        #- K6_WEB_DASHBOARD_EXPORT=/results/Attributes/K6-GetAttributes-Report.html
        #- K6_WEB_DASHBOARD_EXPORT=/results/Attributes/K6-GetLeafAttributes-Report.html
        #- K6_WEB_DASHBOARD_EXPORT=/results/Attributes/K6-GetSubAttributes-Report.html
        #- K6_WEB_DASHBOARD_EXPORT=/results/Attributes/K6-UpdateAttributeValues-Report.html
    ports:
      - "5665:5665"
    networks:
      - default
